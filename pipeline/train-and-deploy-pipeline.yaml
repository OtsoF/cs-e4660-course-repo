apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: train-and-deploy-
  labels:
    workflows.argoproj.io/archive-strategy: "false"
  annotations:
    workflows.argoproj.io/description: |
      This workflow runs the model-training and (re-)deploys the model-api.
spec:
  entrypoint: full-pipeline
  arguments:
    parameters:
      - name: fake_computation
        value: "false"

  volumes:
  - name: shared-data
    hostPath:
      path: /data
      type: DirectoryOrCreate

  templates:
    - name: full-pipeline
      steps:
        - - name: model-training
            template: model-training
        - - name: deploy-model-api-service
            template: deploy-model-api-service
          - name: deploy-model-api
            template: deploy-model-api
        - - name: update-model-api
            template: update-model-api
            #when: "{{steps.deploy-model-api.exitCode}} != 0"

    - name: model-training
      container:
        name: model-training
        image: model-training:latest
        command: [python]
        args: ["training.py"]
        imagePullPolicy: Never
        env:
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: my-database-cluster-app
                key: username
                optional: false
          - name: DB_PASS
            valueFrom:
              secretKeyRef:
                name: my-database-cluster-app
                key: password
                optional: false
          - name: DB_HOST
            value: my-database-cluster-rw
          - name: DB_NAME
            value: app
          - name: MODEL_FILE_PATH
            value: /app/data
          - name: FAKE_COMPUTATION
            value: "{{workflow.parameters.fake_computation}}"
        volumeMounts:
          - name: shared-data
            mountPath: /app/data
        resources:
          limits:
            cpu: '1000m'
            memory: 2G
          requests:
            cpu: '500m'
            memory: 512M

    - name: deploy-model-api
      resource:
        action: apply
        #successCondition: status.availableReplicas > 0
        #failureCondition: status.unavailableReplicas > 0, status.conditions > 1
        manifest: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: model-api
            labels:
              app: model-api
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: model-api
            template:
              metadata:
                labels:
                  app: model-api
              spec:
                restartPolicy: Always
                containers:
                  - name: model-api
                    image: model-api:latest
                    imagePullPolicy: Never
                    ports:
                      - containerPort: 5000
                    env:
                      - name: API_HOST
                        value: "0.0.0.0"
                      - name: API_PORT
                        value: "5000"
                      - name: MODEL_PATH
                        value: "/app/data"
                    volumeMounts:
                      - name: shared-data
                        mountPath: /app/data
                    resources:
                      limits:
                        cpu: '500m'
                        memory: 2G
                      requests:
                        cpu: '250m'
                        memory: 512M
                volumes:
                  - name: shared-data
                    hostPath:
                      path: /data
                      type: DirectoryOrCreate

    - name: deploy-model-api-service
      resource:
        action: apply
        manifest: |
          apiVersion: v1
          kind: Service
          metadata:
            name: model-api
            labels:
              app: model-api
          spec:
            type: NodePort
            ports:
              - port: 5000
                targetPort: 5000
                nodePort: 30004
            selector:
              app: model-api
    
    - name: update-model-api
      resource:
        action: patch
        manifest: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: model-api
          spec:
            template:
              metadata:
                annotations:
                  deploy-timestamp: "{{workflow.creationTimestamp}}"  